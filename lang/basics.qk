%{
    
multi-line comments goes here
yay

}%

% ------- list -------
lis = [1:10];

% iteration 0 to 63
for i = [:64] :
{
    % do something
}

% list access: python style
lis[-1];
lis[3:6];

% # operator returns the size of the first dimension
#lis == 9;

% ------- matrix -------
mat = [[2, 3],[5, 6],[-1, 2]];
mat = mat'; % transpose, must be 2D
mat2 = [[-2, 3],[0, 6]];

#mat[0] == 2; % column dim
#(mat * mat2) == 3; % row dim

% get element
mat[0][1];
mat[0, 1]; % equivalent

% ------- strings -------
s = "helloworld";
#s == 10;
s += " quark"; % gives "helloworld quark"
s[2] == "l"; % python style indexing, no 'char' type

% ------- complex numbers -------
(3 + 1i) * -1.3i;

% double ** for power
(-.5 + .3i) ** 5;

cx = 2.6 - 1.3i;
% # operator on complex number returns its norm
#cx == 2.6**2 + (-1.3)**2;
cx[0] == 2.6; % get real part
cx[1] == -1.3; % get imaginary part

abs(cx) == sqrt(#cx);

% ------- fraction -------
fr = 5$3;
fr + 2$7 == 41$21;
1/fr = 3$5;

% ------- other -------
% returns quantum register size
q = qureg 7 0;
#q == 7;
