def int exp_mod(int b, int e, int m)
{
    int remainder;
    int x = 1;

    while (e != 0)
    {
        remainder = e mod 2;
        e = e >> 1;

        if (remainder == 1)
            x = (x * b) mod m;
        b = (b * b) mod m;
    }
    return x;
}

def int smallest_period(int b, int M)
{
    int i = 1;
    while (exp_mod(b, i, M) != 1)
        i ++;
    return i;
}

def int long_pow(int a, int p)
{
	if (p == 1)
		return a;
	int partial = long_pow(a, p / 2);
	if (p mod 2 == 1)
		return partial * partial * a;
	else
		return partial * partial;
}

def int log2_int(int x)
{
	int ans = 0;
	while (x > 0)
	{
		x = x >> 1;
        ans ++;
	}
	return ans;
}

%{
	If size == 0, continue until 0
%}
def int[] to_continued_fraction(fraction frac, int size)
{
	int[] cfrac;
	int i = 0;
	while (size < 1 or i < size)
	{
        cfrac = cfrac + [num(frac) / denom(frac)];
		frac -= cfrac[i];
		if (num(frac) == 0) break;

        % denom/num built-in
		frac = ~frac;
        i ++;
	}
	return cfrac;
}

def fraction to_fraction(int[] cfrac, int size)
{
	if (size < 1)
		size = len(cfrac);
	ans = 1$cfrac[size - 1];
	for (int i in [size - 2 : 0])
	{
		ans += cfrac[i];
		ans = ~ans;
	}
	return ans + cfrac[0];
}

int M = 17 * 13;
int nbit = log2_int(M) + 1;

% This is the user defined function that should be passed as a string argument
def int shor_oracle(int x)
{
	return exp_mod(nbit, x, M);
}

def int main()
{
	qureg q0 = <# nbit * 2, 0 #>;

	qft(q0, 0, nbit);

	int b, i;
	while (true)
	{
		b = rand_int(2, M);

		if (gcd(b, M) != 1) continue;

		qureg q = qclone(q);

		apply_oracle(q, "shor_oracle", nbit);

		qft(q, 0, nbit);

		int mTrial = 0;
		int measured;

		while (mTrial < 10)
		{
            mTrial ++;
			measured = q ? nbit;
			if (measured != 0)
			{
				int[] cfrac = to_continued_fraction((1 << nbit)$measured, 0);
				for (int size in [len(cfrac):0])
				{
					int p = num(to_fraction(cfrac, size));
					int P = p;

					while (P < 128 and P < M)
					{
						if (P mod 2 == 0
							and exp_mod(b, P, M) == 1)
						{
							int check = exp_mod(b, P / 2, M);
							if (check != 1 and check != M - 1)
							{
								int b_P_1 = long_pow(b, P / 2) - 1;
								int prime = gcd(M, b_P_1);

								if (prime != 1 and prime != -1)
								{
									print("Found period r = ", P);
									print("b ^ r = ", b, " ^ ", P, " = 1 mod ", M);
									print("b ^ (r/2) = ", b, " ^ ", P / 2, " = ", check, " mod ", M);
									int prime2 = gcd(M, b_P_1 + 2);
									print("gcd(", M, ", ", b_P_1, ") = ", prime);
									print("gcd(", M, ", ", b_P_1 + 2, ") = ", prime2);
									int other_prime;
									if (prime2 == 1)
										other_prime = M / prime;
									else
										other_prime = prime2;
									print("\nFactorize ", M, " = ", prime, " * ", other_prime);
									return 0;
								}
							}
						}
						P += p;
					}
				}
			}
		}
	}
	print("FAIL");
	return 1;
}

