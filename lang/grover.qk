import gate;
import util;

key = int(input("The key to search"));

% the search oracle
ocfun = lambda x : x == key;
ocfun = lambda x : { return x == key; };

nbit = 5;

N = 2 ** nbit;

q = qureg nbit, 0;

for i = [:nbit] :
    had q, i;

% standard function sqrt()
for iter = [: floor(sqrt N)]:
{
    % apply search oracle
    oracle q, ocfun, nbit;

    had_multi q, [:nbit];

    % define a diffuse matrix
    % initialize to all zeros
    diffuse = zeros N, N;
    diffuse[0, 0] = 1;
    for i = [1:#diffuse]:
        diffuse[i][i] = -1;

    % apply this unitary gate
    generic_gate q, diffuse;

    had_multi q, [:nbit];
}

% measure the whole register, 
% then shift one bit to the right.
result = (q ?) >> 1;

% alternatively, measure only the top qubits
result = q ? 0:nbit;
